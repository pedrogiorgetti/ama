// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package postgres

import (
	"context"

	"github.com/google/uuid"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO message 
  ("room_id", "text")
  VALUES ($1, $2)
RETURNING "id", "room_id", "text", "reaction_count", "answered", "created_at", "updated_at"
`

type CreateMessageParams struct {
	RoomID uuid.UUID
	Text   string
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRow(ctx, createMessage, arg.RoomID, arg.Text)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.RoomID,
		&i.Text,
		&i.ReactionCount,
		&i.Answered,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createRoom = `-- name: CreateRoom :one
INSERT INTO room 
  ("theme") VALUES
  ($1)
RETURNING "id", "theme", "created_at", "updated_at"
`

func (q *Queries) CreateRoom(ctx context.Context, theme string) (Room, error) {
	row := q.db.QueryRow(ctx, createRoom, theme)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.Theme,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMessage = `-- name: GetMessage :one
SELECT
    "id", "room_id", "text", "reaction_count", "answered", "created_at", "updated_at"
FROM message
WHERE "id" = $1
`

func (q *Queries) GetMessage(ctx context.Context, id uuid.UUID) (Message, error) {
	row := q.db.QueryRow(ctx, getMessage, id)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.RoomID,
		&i.Text,
		&i.ReactionCount,
		&i.Answered,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRoom = `-- name: GetRoom :one
SELECT 
    "id", "theme", "created_at", "updated_at"
FROM room
WHERE "id" = $1
`

func (q *Queries) GetRoom(ctx context.Context, id uuid.UUID) (Room, error) {
	row := q.db.QueryRow(ctx, getRoom, id)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.Theme,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRoomMessages = `-- name: GetRoomMessages :many
SELECT
    "id", "room_id", "text", "reaction_count", "answered", "created_at", "updated_at"
FROM message
WHERE "room_id" = $1
`

func (q *Queries) GetRoomMessages(ctx context.Context, roomID uuid.UUID) ([]Message, error) {
	rows, err := q.db.Query(ctx, getRoomMessages, roomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.RoomID,
			&i.Text,
			&i.ReactionCount,
			&i.Answered,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRooms = `-- name: GetRooms :many
SELECT 
    "id", "theme", "created_at", "updated_at"
FROM room
`

func (q *Queries) GetRooms(ctx context.Context) ([]Room, error) {
	rows, err := q.db.Query(ctx, getRooms)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Room
	for rows.Next() {
		var i Room
		if err := rows.Scan(
			&i.ID,
			&i.Theme,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markMessageAsAnswered = `-- name: MarkMessageAsAnswered :exec
UPDATE message
SET
    "answered" = true
WHERE "id" = $1
`

func (q *Queries) MarkMessageAsAnswered(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, markMessageAsAnswered, id)
	return err
}

const reactToMessage = `-- name: ReactToMessage :one
UPDATE message
SET
    "reaction_count" = "reaction_count" + 1
WHERE "id" = $1
RETURNING "reaction_count"
`

func (q *Queries) ReactToMessage(ctx context.Context, id uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, reactToMessage, id)
	var reaction_count int64
	err := row.Scan(&reaction_count)
	return reaction_count, err
}

const removeReactionFromMessage = `-- name: RemoveReactionFromMessage :one
UPDATE message
SET
    "reaction_count" = "reaction_count" - 1
WHERE "id" = $1
RETURNING "reaction_count"
`

func (q *Queries) RemoveReactionFromMessage(ctx context.Context, id uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, removeReactionFromMessage, id)
	var reaction_count int64
	err := row.Scan(&reaction_count)
	return reaction_count, err
}
